version: '3.7'

services:
  mockserver:
    image: jamesdbloom/mockserver:mockserver-5.11.1
    ports:
      - 1080:1080
      - 1081:1081
    environment:
      - LOG_LEVEL=DEBUG
      - SERVER_PORT="1080,1081"
      - MOCKSERVER_WATCH_INITIALIZATION_JSON=true
      - MOCKSERVER_INITIALIZATION_JSON_PATH=/mockserver.init.d/mockserver-initialization.json
    volumes:
      - ./.mockserver.init.d:/mockserver.init.d
    networks:
      datamesh:

  s3server:
    # profiles: ["all", "demo"]
    image: localstack/localstack-full:0.12.15
    ports:
      - "4563-4584:4563-4584"
    env_file:
      - .s3.env
    volumes:
      - ./aws.setup.d:/docker-entrypoint-initaws.d
      - ./data:/initdata
      - ./.s3-mount:/tmp/localstack
    networks:
      datamesh:

  azserver:
    image: mcr.microsoft.com/azure-storage/azurite:3.15.0
    command:
      - "azurite"
      - "-l"
      - "/workspace"
      - "-d"
      - "/workspace/logs/debug.log"
      - "--blobHost"
      - "0.0.0.0"
      - "--queueHost"
      - "0.0.0.0"
      - "--tableHost"
      - "0.0.0.0"
      - "--loose"
      - "--cert"
      - "/ssl/az_server.pem"
      - "--key"
      - "/ssl/az_private_key.pem"
    ports:
      - 10000:10000
      - 10001:10001
      - 10002:10002
    env_file:
      - .azure.env
    volumes:
      - ./.az-mount/workspace:/workspace
      - ./config/ssl:/ssl
    networks:
      datamesh:
        aliases:
          - devstoreaccount1.blob.azserver

  gcsserver:
    image: fsouza/fake-gcs-server:1.37
    ports:
      - 4443:443
    command: ["-port", "443", "-external-url", "https://gcsserver", "-cert-location", "/etc/ssl/certs/ca-certificates.crt", "-private-key-location", "/etc/ssl/certs/server.key"]
    volumes:
      - ./data/cities:/data/storage-bucket/cities
      - ./data/sales:/data/storage-bucket/sales
      - ./config/ssl/gcs_server.pem:/etc/ssl/certs/ca-certificates.crt
      - ./config/ssl/gcs_private_key.pem:/etc/ssl/certs/server.key
    networks:
      datamesh:
        aliases:
          - storage.googleapis.com

  delta:
    # profiles: ["all", "demo"]
    # image: deltaio/delta-sharing-server:0.4.0
    build:
      context: ./docker/gcs-patched-delta-sharing
      dockerfile: Dockerfile
    command: ["--config", "/opt/docker/conf/delta-sharing.yml"]
    ports:
      - 38080:8080
    env_file:
      - .delta.env
    volumes:
      - ./config/delta/:/opt/docker/conf
      - ./config/ssl/:/opt/docker/ssl
    networks:
      datamesh:

  sparkprepare:
    # profiles: ["all"]
    build:
      context: ./docker/spark-dataprep
      dockerfile: Dockerfile
      args:
        - SPARK_VERSION=3.1.1
    env_file:
      - .s3.env
    environment:
      - SPARK_NO_DAEMONIZE=true
      - SSL_CERT_FILE=/opt/spark/ssl/server.pem
      - REQUESTS_CA_BUNDLE=/opt/spark/ssl/server.pem
    entrypoint:
      - /usr/bin/tail
      - "-f"
      - /dev/null
    volumes:
      - ./data:/initdata
      - ./config/ssl:/opt/spark/ssl
    networks:
      datamesh:

  sparkshell:
    # profiles: ["all", "demo"]
    build:
      context: ./docker/multicloud-spark
      dockerfile: Dockerfile
      args:
        - SPARK_VERSION=3.1.1
    environment:
      - SPARK_NO_DAEMONIZE=true
    entrypoint:
      - /usr/bin/tail
      - "-f"
      - /dev/null
    volumes:
      - ./config/sharing/:/opt/delta/conf/
      - ./config/ssl:/opt/spark/ssl
    networks:
      datamesh:

  python:
    # profiles: ["all", "demo"]
    build:
      context: ./docker/python-delta
      dockerfile: Dockerfile
    environment:
      - SSL_CERT_FILE=/opt/spark/ssl/server.pem
    tty: true
    volumes:
      - ./config/sharing/:/opt/delta/conf/
      - ./config/ssl:/opt/spark/ssl
    networks:
      datamesh:

  jupyter:
    # profiles: ["all", "demo"]
    # image: almondsh/almond:latest
    build:
      context: ./docker/almond-with-storage-certs
      dockerfile: Dockerfile
    environment:
      - SPARK_CONF_DEFAULTS=/opt/spark/conf/spark.conf
      - JUPYTER_ENABLE_LAB=true
      - SSL_CERT_FILE=/opt/spark/ssl/server.pem
    command:
      - "start-notebook.sh"
      - "--NotebookApp.token=datamesh"
      - "--NotebookApp.notebook_dir=/home/jovyan/work/notebooks"
    ports:
      - 18888:8888
      - 14040:4040
    volumes:
      - ./notebooks/:/home/jovyan/work/notebooks/
      - ./config/sharing/:/opt/delta/conf/
      - ./config/spark/:/opt/spark/conf/
      - ./config/ssl:/opt/spark/ssl
    networks:
      datamesh:

networks:
  datamesh: